[ -e /etc/zsh/zprofile ] && source /etc/zsh/zprofile

# Use terminfo for some keystuffs
# see https://unix.stackexchange.com/questions/378730/zsh-where-is-the-key-terminfo-dictionary-defined etc
# Ideally, this would be dealt with correctly in nixos, but apparently there isn't a default keymapping anywhere in nixos.

typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}" reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
  autoload -Uz add-zle-hook-widget
  function zle_application_mode_start { echoti smkx }
  function zle_application_mode_stop { echoti rmkx }
  add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
  add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

bindkey -v
bindkey '^R' history-incremental-search-backward

autoload -Uz compinit
compinit


#gpg
# if [[ "${SSH_AUTH_SOCK-}" == "" ]]; then
#   gpg-agent --quiet --daemon --enable-ssh-support &>/dev/null
#   export GPG_TTY=$(tty)
#   export SSH_AUTH_SOCK=/run/user/1000/gnupg/S.gpg-agent.ssh
# fi

type vim &>/dev/null && export EDITOR=$(which vim)
if type nvim &>/dev/null; then
  export EDITOR=$(which nvim)
  alias vim=nvim
fi

# (＋_＋)
if [[ "$SHELL" = "urxvt" ]]; then
  bindkey "^[[7~" beginning-of-line
  bindkey "^[[8~" end-of-line
fi

unsetopt CORRECT
unsetopt correct_all

genpass() {
  l=${1:-128}
  tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l}
  echo
}

mcd () {
  mkdir -p "$@" && cd "$@"
}

alias ←="pushd -q -1"
alias →="pushd -q +1"
alias ↑="cd .."
bindkey -s '^u' "↑\n"
bindkey -s '^b' "←\n"
bindkey -s '^f' "→\n"

export HISTSIZE=200000
export HISTFILE="$HOME/.zsh_history"
setopt autocd

type direnv &>/dev/null && eval "$(direnv hook zsh)"
if type kubectl &>/dev/null; then
  alias k=kubectl
fi

type rustc &>/dev/null && {
  export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
}

# type kubectl &>/dev/null && source <(kubectl completion zsh)

type guix &>/dev/null && export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale

export ALAMI_OWNER=137112412989

export CL_REGIONS=( us-east-1 us-east-2 us-west-1 us-west-2 eu-west-1 eu-west-2 eu-central-1 ap-south-1 ap-southeast-1 ap-southeast-2 ap-northeast-1 ap-northeast-2 sa-east-1 ca-central-1 )
export COREOS_OWNER=595879546273

unixts() {
  awk 'BEGIN{srand();print srand()}'
}

missing_label() {
  repo=${1:?'Usage: missing_labels <org/repo> <label_prefix>'}
  label=${2:?'Usage: missing_labels <org/repo> <label_prefix>'}
  hub api \
    --paginate \
    "repos/$repo/issues" | \
    jq '.[] | select(.labels | any(.name | startswith("team/"))|not)' | \
    jq '. | select(.pull_request | not)' | \
    jq '[.html_url, .title] | join("    -    ")' -cr
}

[ -e ~/.zshrc.custom ] && source ~/.zshrc.custom
